# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

exec_always nm-applet --indicator

# font pango: SourceCodePro Medium 12
font pango: "JetBrainsMono Nerd Font" Regular 12

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mainMod Mod4
set $secondMod Mod1

# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l

# Your preferred terminal emulator
set $term alacritty

# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# set $menu dmenu_path | dmenu | xargs swaymsg exec --
set $menu rofi -show drun

default_border pixel 2
default_floating_border none
gaps inner 2
gaps outer 4
client.focused "#78cee990" "#78cee990" "#e1e2e3" "#78cee990"
client.unfocused "#27313690" "#27313690" "#e1e2e3" "#27313690"
smart_gaps on
smart_borders on

# GTK
set $gnome-schema org.gnome.desktop.interface
exec {
    gsettings set $gnome-schema gtk-theme 'Orchis-Dark'
    gsettings set $gnome-schema.wm.preferences theme 'Orchis-Dark'
    gsettings set $gnome-schema icon-theme 'Papirus-Dark'
}

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
output * bg $HOME/.dotfiles/assets/wallpapers/forest.png fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

# output DP-1 pos 0 -360 res 2560x1440
# output eDP-1 pos 2560 0 res 1920x1080
output eDP-1 scale 1.6

# workspace 1 output DP-1
# workspace 2 output eDP-1

### Idle configuration
#
# Example configuration:
#
exec swayidle -w \
         timeout 300 'swaylock -f -c 000000' \
         before-sleep 'swaylock -f -c 000000'

bindsym $mainMod+$secondMod+l exec swaylock -f -c 000000

# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

input type:keyboard {
    xkb_layout nocustom
    xkb_options altwin:swap_alt_win
    repeat_delay 500
    repeat_rate 40
}

input type:touchpad {
    dwt enabled
    tap enabled
    tap_button_map lrm
    natural_scroll enabled
    middle_emulation disabled
    click_method clickfinger
}

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mainMod+Return exec $term

    # Kill focused window
    bindsym $mainMod+q kill

    # Start your launcher
    bindsym $secondMod+space exec $menu

    bindsym Ctrl+Shift+l exec 1password --lock
    bindsym Shift+$secondMod+space exec 1password --quick-access
    bindsym $mainMod+N exec swaync-client -t -sw
    bindsym $mainMod+Shift+N exec swaync-client -C

    bindswitch --reload --locked lid:on exec swaylock -f -c 000000 && systemctl suspend

    # Drag floating windows by holding down $mainMod and left mouse button.
    # Resize them with right mouse button + $mainMod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mainMod normal

    # Reload the configuration file
    bindsym $mainMod+Shift+c reload

    bindsym $mainMod+d exec killall waybar || waybar

    # Exit sway (logs you out of your Wayland session)
    # bindsym $mainMod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
    bindsym $mainMod+Shift+e exec rofi -show poweroff
#
# Moving around:
#
    # Move your focus around
    # bindsym $mainMod+$left focus left
    # bindsym $mainMod+$down focus down
    # bindsym $mainMod+$up focus up
    # bindsym $mainMod+$right focus right
    # Or use $mainMod+[up|down|left|right]
    # Move focus with mainMod + arrow keys or hjkl
    bindsym $mainMod+Left focus left
    bindsym $mainMod+Right focus right
    bindsym $mainMod+Up focus up
    bindsym $mainMod+Down focus down
    bindsym $mainMod+H focus left
    bindsym $mainMod+L focus right
    bindsym $mainMod+K focus up
    bindsym $mainMod+J focus down

    # Move the focused window with the same, but add Shift
    # bindsym $mainMod+Shift+$left move left
    # bindsym $mainMod+Shift+$down move down
    # bindsym $mainMod+Shift+$up move up
    # bindsym $mainMod+Shift+$right move right
    # Ditto, with arrow keys
    # Move windows with mainMod + SHIFT + arrow keys or hjkl
    bindsym $mainMod+Shift+Left move left
    bindsym $mainMod+Shift+Right move right
    bindsym $mainMod+Shift+Up move up
    bindsym $mainMod+Shift+Down move down
    bindsym $mainMod+Shift+H move left
    bindsym $mainMod+Shift+L move right
    bindsym $mainMod+Shift+K move up
    bindsym $mainMod+Shift+J move down

#
# Workspaces:
#
    set $next_or_new swaymsg -r -t get_workspaces | jq -r --arg OUTPUT $(swaymsg -t get_outputs -r | jq -r '.[] | select(.focused == true) | .name') '(. | (max_by(.num) | .num)) as $max | [.[] | select(.output == $OUTPUT)] | (max_by(.num) | .num) as $maxOutput | (.[] | select(.focused == true) | .num) as $current | if $maxOutput > $current then "next_on_output" else $max + 1 end'

    # Switch to workspace
    bindsym ctrl+$secondMod+$down workspace prev
    bindsym ctrl+$secondMod+$up exec swaymsg "workspace $($next_or_new)"
    bindsym $mainMod+1 workspace number 1
    bindsym $mainMod+2 workspace number 2
    bindsym $mainMod+3 workspace number 3
    bindsym $mainMod+4 workspace number 4
    bindsym $mainMod+5 workspace number 5
    bindsym $mainMod+6 workspace number 6
    bindsym $mainMod+7 workspace number 7
    bindsym $mainMod+8 workspace number 8
    bindsym $mainMod+9 workspace number 9
    bindsym $mainMod+0 workspace number 10

    # Move focused container to workspace
    bindsym ctrl+$secondMod+$left move container to workspace prev_on_output, workspace prev_on_output
    bindsym ctrl+$secondMod+$right exec swaymsg "move container to workspace $($next_or_new), workspace $($next_or_new)"
    bindsym $mainMod+Shift+1 move container to workspace number 1
    bindsym $mainMod+Shift+2 move container to workspace number 2
    bindsym $mainMod+Shift+3 move container to workspace number 3
    bindsym $mainMod+Shift+4 move container to workspace number 4
    bindsym $mainMod+Shift+5 move container to workspace number 5
    bindsym $mainMod+Shift+6 move container to workspace number 6
    bindsym $mainMod+Shift+7 move container to workspace number 7
    bindsym $mainMod+Shift+8 move container to workspace number 8
    bindsym $mainMod+Shift+9 move container to workspace number 9
    bindsym $mainMod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    # Resize windows with mainMod + CTRL + arrow keys or hjkl
    bindsym $mainMod+CTRL+Left resize shrink width 12px
    bindsym $mainMod+CTRL+Right resize grow width 12px
    bindsym $mainMod+CTRL+Up resize shrink height 12px
    bindsym $mainMod+CTRL+Down resize grow height 12px
    bindsym $mainMod+CTRL+H resize shrink width 12px
    bindsym $mainMod+CTRL+L resize grow width 12px
    bindsym $mainMod+CTRL+K resize shrink height 12px
    bindsym $mainMod+CTRL+J resize grow height 12px
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mainMod+b or $mainMod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mainMod+b splith
    bindsym $mainMod+v splitv

    # Switch the current container between different layout styles
    bindsym $mainMod+s layout stacking
    bindsym $mainMod+w layout tabbed
    bindsym $mainMod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mainMod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mainMod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    # bindsym $mainMod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mainMod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mainMod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    # bindsym $mainMod+minus scratchpad show
    bindsym ctrl+$secondMod+space scratchpad show
#
# Screenshots
#
    bindsym CTRL+ALT+2 exec grim -o $(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name') "${HOME}/Pictures/screenshots/$(date +'screenshot_%F-%T').png"
    bindsym CTRL+ALT+Shift+2 exec grim -o $(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name') - | wl-copy
    bindsym CTRL+ALT+3 exec grim -g "$(swaymsg -t get_tree | jq -j '.. | select(.type?) | select(.focused).rect | "\(.x),\(.y) \(.width)x\(.height)"')" "${HOME}/Pictures/screenshots/$(date +'screenshot_%F-%T').png"
    bindsym CTRL+ALT+Shift+3 exec grim -g "$(swaymsg -t get_tree | jq -j '.. | select(.type?) | select(.focused).rect | "\(.x),\(.y) \(.width)x\(.height)"')" - | wl-copy
    bindsym CTRL+ALT+4 exec grim -g "$(slurp)" "${HOME}/Pictures/screenshots/$(date +'screenshot_%F-%T').png"
    bindsym CTRL+ALT+Shift+4 exec grim -g "$(slurp -d)" - | wl-copy
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 12px
    bindsym $down resize grow height 12px
    bindsym $up resize shrink height 12px
    bindsym $right resize grow width 12px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 12px
    bindsym Down resize grow height 12px
    bindsym Up resize shrink height 12px
    bindsym Right resize grow width 12px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mainMod+r mode "resize"

# Media and volume keys
bindsym XF86MonBrightnessDown exec brightnessctl set -s 10%-
bindsym XF86MonBrightnessUp exec brightnessctl set -s 10%+

bindsym XF86KbdBrightnessUp exec brightnessctl --device='smc::kbd_backlight' set 10%+
bindsym XF86KbdBrightnessDown exec brightnessctl --device='smc::kbd_backlight' set 10%-

bindsym XF86AudioRaiseVolume exec wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindsym XF86AudioLowerVolume exec wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindsym XF86AudioMute exec wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindsym XF86AudioMicMute exec wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
# Requires playerctl
bindsym XF86AudioPlay exec playerctl play-pause
bindsym XF86AudioStop exec playerctl stop
bindsym XF86AudioPrev exec playerctl previous
bindsym XF86AudioNext exec playerctl next

#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
	swaybar_command waybar
}

include /etc/sway/config.d/*
