error_log() {
	tail -f ~/Development/vhost/*/logs/"$@"
}

mp4-convert() {
	# ffmpeg -i "$1" -acodec libfaac -b:a 96k -vcodec libx264 -strict -2 -b:v 1M -s 1280x720 -pix_fmt yuv420p "mp4/$2"
	ffmpeg -i "$1" -vcodec h264 -acodec aac -strict -2 "mp4/$2"
}

srdb() {
	php /usr/local/bin/Search-Replace-DB/srdb.cli.php -u root -p root -h localhost "$@"
}

# Start, stop and restart local server
function server() {

	case $1
		in
			start)
				mysql-start
				php-fpmd start
				nginxd start
				;;
			stop)
				mysql-stop
				php-fpmd stop
				nginxd stop
				;;
			restart)
				mysql-restart
				php-fpmd restart
				nginxd restart
				;;
			*)
				echo "Usage: server start|stop|restart"
	esac

}

# artisanclean
artisanclean() {

    if [ ! -f 'artisan' ]; then
        echo "You need to be in the same folder as artisan!"
        return
    fi

    if [ ! -d "public/uploads" ]; then
    	mkdir public/uploads
    fi

    sudo chown -R _www:staff bootstrap/cache storage public/uploads
    sudo chmod -R 775 bootstrap/cache storage public/uploads

    php artisan cache:clear
    php artisan clear-compiled
    php artisan optimize
    php artisan config:clear

}

# Open customer
kunder() {
	CUSTOMER="$1"
	CHARACTER=${CUSTOMER:0:1}
	open "/Users/$USER/Documents/Kunder/$CHARACTER/$CUSTOMER";
}

function web_search() {

	# define search engine URLS
	typeset -A urls
	urls=(
		google        "https://www.google.com/search?q="
		github        "https://github.com/search?q="
		stackoverflow "http://stackoverflow.com/search?tab=relevance&q="
		wordpress     "http://wordpress.org/search/"
		caniuse       "http://caniuse.com/#search="
		phpnet        "http://php.net/manual-lookup.php?pattern="
	)

	# Check whether the search engine is supported
	if [[ -z "$urls[$1]" ]]; then
		echo "Search engine $1 not supported."
		return 1
	fi

	# Search or go to main page depending on number of arguments passed
	if [[ $# -gt 1 ]]; then
		# build search url:
		# join arguments passed with '+', then append to search engine URL
		url="${urls[$1]}${(j:+:)@[2,-1]}"
	else
		# Build main page url:
		# Split by '/', then rejoin protocol (1) and domain (2) parts with '//'
		url="${(j://:)${(s:/:)urls[$1]}[1,2]}"
	fi

	open_command "$url"
}

service() {
	sudo brew services $*
}

morgen-kaffe() {
	open "https://comics.io/my/"
	open "https://news.ycombinator.com/"
	open "http://thehackernews.com/"
	open "http://www.tek.no/#hardware"
	open "https://www.smashingmagazine.com/"
	open "http://alistapart.com/"
	open "https://hackernoon.com/"
	open "https://medium.com/"
}

# Swith php version
sphp() {

	if [ $# -ne 1 ]; then
		echo "Usage: sphp [phpversion]"
		exit 1
	fi

	currentversion="`php -r \"echo str_replace('.', '', substr(phpversion(), 0, 3));\"`"
	newversion="${1//\.}"

	shortOld="`php -r \"echo substr(phpversion(), 0, 1);\"`"
	shortNew="`php -r \"echo substr('$newversion', 0, 1);\"`"

	brew list php$newversion 2> /dev/null > /dev/null

	if [ $? -eq 0 ]; then
		echo "PHP version $newversion found"

		php-fpmd stop

		echo "Unlinking old binaries..."
		brew unlink php$currentversion 2> /dev/null > /dev/null

		echo "Linking new binaries..."
		brew link php$newversion

		echo "Linking new modphp addon..."
		sudo ln -sf `brew list php$newversion | grep libphp` /usr/local/lib/libphp${shortNew}.so

		ln -sf "/usr/local/etc/php/$1" "/usr/local/etc/php/current"

		php-fpmd start

		echo "Done."
	else
		echo "PHP version $newversion was not found."
		exit 1
	fi

}
