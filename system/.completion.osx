# Kunder completion
_error_log() {

	local errorlogs=(~/Development/vhost/*/logs/*.error.log(N:t))
	compadd -a errorlogs

}

compdef _error_log error_log

# Kunder completion
_kunder() {

	# Backup and change IFS
	saveIFS=$IFS
	IFS=$'\n'

	# Get all customer folders
	local customers=($(basename print -l ~/Documents/Kunder/*/*(/)))

	# Add all entries as completions
	compadd -a customers

	# Restore IFS
	IFS=$saveIFS

}

compdef _kunder kunder

_databases() {
	local -a databases
	databases=( $(mysql -u root --password=root -e 'show databases;' 2>/dev/null | awk '/([a-zA-Z0-9_]+)/ { print $1 }') )
	_describe "MySQL databases" databases
}

_vhosts() {
	local -a vhosts
	vhosts=( $(basename print -l ~/Development/vhost/*(/) ) )
	_describe "Virtual hosts" vhosts
}

_srdb() {

	typeset -A opt_args

	_arguments \
		'-n[Database name]:database: _databases' \
		'-s[Search for]:search: _vhosts' \
		'-r[Reaplce with]:replace: _vhosts'

}

compdef _srdb srdb

_service() {

	typeset -A opt_args
	_arguments -C \
		'1: :->command'\
		'2: :->formula'\
		'*:: :->options'

	case $state in
		command)
			local commands
			commands=(
					'cleanup:Get rid of stale services and unused plists'
					'list:List all services managed by `brew services`'
					'restart:Gracefully restart service(s)'
					'start:Start service(s)'
					'stop:Stop service(s)'
			)
			_describe 'command' commands
			;;
		formula)
			case $line[1] in
				start)
					local commands
					commands=( $(brew services list | awk '/(^[a-zA-Z0-9]+).*stopped/ { print $1 }') )
					compadd -a commands
					;;
				stop)
					;&
				restart)
					local commands
					commands=( $(brew services list | awk '/(^[a-zA-Z0-9]+).*started/ { print $1 }') )
					compadd -a commands
					;;

			esac

			local options
			options=(
				'--all'
			)
			_describe 'options' options

			;; # End subcommands

	esac

}
compdef _service service

_gitlab() {

	typeset -A opt_args
	_arguments -C \
		'1: :->command'\
		'2: :->subcommand'\
		'*:: :->options'

	case $state in
		command)

			local commands
			commands=(
					'project:Create or search projects'
					'issue:Create or list issues'
			)
			_describe 'command' commands

			;; # End command

		subcommand)

			case $line[1] in
				project)
					local commands
					commands=(
							'create:Create new project'
							'search:Search projects'
					)
					_describe 'subcommand' commands
					;;
				issue)
					local commands
					commands=(
							'create:Create new issue for current Git-project'
							'list:List issue for current Git-project'
					)
					_describe 'subcommand' commands
					;;

			esac

			local options
			options=()
			_describe 'options' options

			;; # End subcommand

	esac

}
compdef _gitlab gitlab
